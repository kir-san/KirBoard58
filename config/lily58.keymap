/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/mouse.h>

/ {
    combos {
        compatible = "zmk,combos";

        combo_esc {
            timeout-ms = <50>;
            key-positions = <0 1>;
            bindings = <&kp ESC>;
        };
    };

    behaviors {
        ss_hs_modmorph: ss_hs_modmorph {
            compatible = "zmk,behavior-mod-morph";
            label = "SS_HS_MODMORPH";
            bindings = <&kp M>, <&kp RIGHT_BRACKET>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        kh_hs_tapdance: kh_hs_tapdance {
            compatible = "zmk,behavior-tap-dance";
            label = "KH_HS_TAPDANCE";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&kp LEFT_BRACKET>, <&kp RIGHT_BRACKET>;
        };

        hrm: hrm {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <200>;
            quick-tap-ms = <200>;
            require-prior-idle-ms = <125>;
            bindings = <&kp>, <&kp>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // ------------------------------------------------------------------------------------------------------------
            // |  ESC  |  1  |  2  |  3   |  4   |  5   |                   |  6   |  7    |  8    |  9   |   0   |   `   |
            // |  TAB  |  Q  |  W  |  E   |  R   |  T   |                   |  Y   |  U    |  I    |  O   |   P   |   -   |
            // |  CTRL |  A  |  S  |  D   |  F   |  G   |                   |  H   |  J    |  K    |  L   |   ;   |   '   |
            // | SHIFT |  Z  |  X  |  C   |  V   |  B   |   "["  |  |  "]"  |  N   |  M    |  ,    |  .   |   /   | SHIFT |
            //                     | ALT  | GUI  | LOWER|  SPACE |  | ENTER | RAISE| BSPC  | GUI   |

            bindings = <
&kp GRAVE       &kp N1  &kp N2  &kp N3        &kp N4  &kp N5                              &kp N6  &kp N7   &kp N8     &kp N9   &kp N0    &kp MINUS
&kp TAB         &kp Q   &kp W   &kp E         &kp R   &kp T                               &kp Y   &kp U    &kp I      &kp O    &kp P     &kp LEFT_BRACKET
&kp LEFT_SHIFT  &kp A   &kp S   &kp D         &kp F   &kp G                               &kp H   &kp J    &kp K      &kp L    &kp SEMI  &kp SQT
&kp LCTRL       &kp Z   &kp X   &kp C         &kp V   &kp B         &mo 3        &mo 4    &kp N   &kp M    &kp COMMA  &kp DOT  &kp FSLH  &kp BACKSPACE
                                &kp LEFT_WIN  &mo 2   &kp LEFT_ALT  &kp SPACE    &kp RET  &mo 1   &kp DEL  &kp K_APP
            >;

            sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN>;
        };

        control_layer {
            bindings = <
&kp ESC  &kp F1  &kp F2  &kp F3  &kp F4  &kp F5                             &kp F6  &kp F7        &kp F8    &kp F9         &kp F10    &kp EQUAL
&trans   &none   &none   &none   &none   &none                              &trans  &kp LC(LEFT)  &kp UP    &kp LC(RIGHT)  &kp PG_UP  &kp RIGHT_BRACKET
&trans   &none   &none   &none   &none   &none                              &trans  &kp LEFT      &kp DOWN  &kp RIGHT      &trans     &kp BACKSLASH
&trans   &none   &none   &none   &none   &none   &none     &kp PRINTSCREEN  &trans  &kp HOME      &trans    &kp END        &kp PG_DN  &trans
                         &trans  &trans  &trans  &trans    &trans           &trans  &trans        &trans
            >;

            label = "conrol";
        };

        additional {
            bindings = <
&kp F1  &kp F2  &kp F3  &kp F4  &kp F5  &kp F6                    &kp F7  &kp F8  &kp FSLH  &kp STAR  &kp MINUS  &kp F12
&trans  &trans  &trans  &trans  &trans  &trans                    &trans  &kp N7  &kp N8    &kp N9    &kp PLUS   &trans
&trans  &trans  &trans  &trans  &trans  &trans                    &trans  &kp N4  &kp N5    &kp N6    &kp PLUS   &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &kp N1  &kp N2    &kp N3    &trans     &trans
                        &trans  &trans  &trans  &trans    &trans  &trans  &kp N0  &kp DOT
            >;
        };

        system {
            bindings = <
&bootloader  &trans        &trans        &trans        &trans        &bt BT_CLR_ALL                       &trans  &trans            &trans          &trans             &trans            &trans
&trans       &trans        &trans        &trans        &trans        &bt BT_CLR                           &trans  &msc SCROLL_LEFT  &mmv MOVE_UP    &msc SCROLL_RIGHT  &msc SCROLL_UP    &trans
&trans       &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4                         &trans  &mmv MOVE_LEFT    &mmv MOVE_DOWN  &mmv MOVE_RIGHT    &mkp MCLK         &trans
&trans       &trans        &trans        &trans        &trans        &trans          &trans    &trans     &trans  &mkp MB4          &trans          &mkp MB5           &mwh SCROLL_DOWN  &trans
                                         &trans        &trans        &trans          &trans    &mkp LCLK  &trans  &trans            &mkp RCLK
            >;
        };

        media {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans                                 &kp C_VOLUME_UP       &kp LS(LA(LC(KP_PLUS)))   &trans                 &trans  &trans  &bootloader
&trans  &trans  &trans  &trans  &trans  &trans                                 &kp C_VOLUME_DOWN     &kp LS(LA(LC(KP_MINUS)))  &trans                 &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans                                 &kp K_PREV            &kp K_MUTE                &kp K_NEXT             &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans    &trans               &kp LS(LC(LA(LEFT)))  &kp K_PLAY_PAUSE          &kp LS(LA(LC(RIGHT)))  &trans  &trans  &kp LS(LA(LC(BACKSPACE)))
                        &trans  &trans  &trans  &trans    &kp LS(LC(LA(DEL)))  &trans                &trans                    &trans
            >;
        };
    };
};
